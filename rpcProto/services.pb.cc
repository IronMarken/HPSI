// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services.proto

#include "services.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace remote {
PROTOBUF_CONSTEXPR AgreementReq::AgreementReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.poly_modulus_degree_)*/0
  , /*decltype(_impl_.plain_modulus_)*/0} {}
struct AgreementReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgreementReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgreementReqDefaultTypeInternal() {}
  union {
    AgreementReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgreementReqDefaultTypeInternal _AgreementReq_default_instance_;
PROTOBUF_CONSTEXPR PubKey::PubKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PubKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PubKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PubKeyDefaultTypeInternal() {}
  union {
    PubKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PubKeyDefaultTypeInternal _PubKey_default_instance_;
PROTOBUF_CONSTEXPR RelKey::RelKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelKeyDefaultTypeInternal() {}
  union {
    RelKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelKeyDefaultTypeInternal _RelKey_default_instance_;
PROTOBUF_CONSTEXPR ParamMsg::ParamMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamMsgDefaultTypeInternal() {}
  union {
    ParamMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamMsgDefaultTypeInternal _ParamMsg_default_instance_;
PROTOBUF_CONSTEXPR AgreementRep::AgreementRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pub_)*/nullptr
  , /*decltype(_impl_.rel_)*/nullptr
  , /*decltype(_impl_.par_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgreementRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgreementRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgreementRepDefaultTypeInternal() {}
  union {
    AgreementRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgreementRepDefaultTypeInternal _AgreementRep_default_instance_;
}  // namespace remote
static ::_pb::Metadata file_level_metadata_services_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2eproto = nullptr;

const uint32_t TableStruct_services_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::remote::AgreementReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::remote::AgreementReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::AgreementReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::remote::AgreementReq, _impl_.poly_modulus_degree_),
  PROTOBUF_FIELD_OFFSET(::remote::AgreementReq, _impl_.plain_modulus_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::PubKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::PubKey, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::RelKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::RelKey, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ParamMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::ParamMsg, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::AgreementRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::AgreementRep, _impl_.pub_),
  PROTOBUF_FIELD_OFFSET(::remote::AgreementRep, _impl_.rel_),
  PROTOBUF_FIELD_OFFSET(::remote::AgreementRep, _impl_.par_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::remote::AgreementReq)},
  { 12, -1, -1, sizeof(::remote::PubKey)},
  { 19, -1, -1, sizeof(::remote::RelKey)},
  { 26, -1, -1, sizeof(::remote::ParamMsg)},
  { 33, -1, -1, sizeof(::remote::AgreementRep)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::remote::_AgreementReq_default_instance_._instance,
  &::remote::_PubKey_default_instance_._instance,
  &::remote::_RelKey_default_instance_._instance,
  &::remote::_ParamMsg_default_instance_._instance,
  &::remote::_AgreementRep_default_instance_._instance,
};

const char descriptor_table_protodef_services_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016services.proto\022\006remote\"\204\001\n\014AgreementRe"
  "q\022\014\n\004name\030\001 \001(\t\022 \n\023poly_modulus_degree\030\002"
  " \001(\005H\000\210\001\001\022\032\n\rplain_modulus\030\003 \001(\005H\001\210\001\001B\026\n"
  "\024_poly_modulus_degreeB\020\n\016_plain_modulus\""
  "\025\n\006PubKey\022\013\n\003key\030\001 \003(\014\"\025\n\006RelKey\022\013\n\003key\030"
  "\001 \003(\014\"\031\n\010ParamMsg\022\r\n\005param\030\001 \003(\014\"g\n\014Agre"
  "ementRep\022\033\n\003pub\030\001 \001(\0132\016.remote.PubKey\022\033\n"
  "\003rel\030\002 \001(\0132\016.remote.RelKey\022\035\n\003par\030\003 \001(\0132"
  "\020.remote.ParamMsg2E\n\014PSIFunctions\0225\n\005set"
  "up\022\024.remote.AgreementReq\032\024.remote.Agreem"
  "entRep\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_services_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2eproto = {
    false, false, 416, descriptor_table_protodef_services_2eproto,
    "services.proto",
    &descriptor_table_services_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_services_2eproto::offsets,
    file_level_metadata_services_2eproto, file_level_enum_descriptors_services_2eproto,
    file_level_service_descriptors_services_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2eproto_getter() {
  return &descriptor_table_services_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2eproto(&descriptor_table_services_2eproto);
namespace remote {

// ===================================================================

class AgreementReq::_Internal {
 public:
  using HasBits = decltype(std::declval<AgreementReq>()._impl_._has_bits_);
  static void set_has_poly_modulus_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plain_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AgreementReq::AgreementReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.AgreementReq)
}
AgreementReq::AgreementReq(const AgreementReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgreementReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.poly_modulus_degree_){}
    , decltype(_impl_.plain_modulus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.poly_modulus_degree_, &from._impl_.poly_modulus_degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.plain_modulus_) -
    reinterpret_cast<char*>(&_impl_.poly_modulus_degree_)) + sizeof(_impl_.plain_modulus_));
  // @@protoc_insertion_point(copy_constructor:remote.AgreementReq)
}

inline void AgreementReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.poly_modulus_degree_){0}
    , decltype(_impl_.plain_modulus_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgreementReq::~AgreementReq() {
  // @@protoc_insertion_point(destructor:remote.AgreementReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgreementReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void AgreementReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgreementReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.AgreementReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.poly_modulus_degree_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.plain_modulus_) -
        reinterpret_cast<char*>(&_impl_.poly_modulus_degree_)) + sizeof(_impl_.plain_modulus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgreementReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.AgreementReq.name"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 poly_modulus_degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_poly_modulus_degree(&has_bits);
          _impl_.poly_modulus_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 plain_modulus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_plain_modulus(&has_bits);
          _impl_.plain_modulus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgreementReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.AgreementReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.AgreementReq.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 poly_modulus_degree = 2;
  if (_internal_has_poly_modulus_degree()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_poly_modulus_degree(), target);
  }

  // optional int32 plain_modulus = 3;
  if (_internal_has_plain_modulus()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_plain_modulus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.AgreementReq)
  return target;
}

size_t AgreementReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.AgreementReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 poly_modulus_degree = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poly_modulus_degree());
    }

    // optional int32 plain_modulus = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plain_modulus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgreementReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgreementReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgreementReq::GetClassData() const { return &_class_data_; }


void AgreementReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgreementReq*>(&to_msg);
  auto& from = static_cast<const AgreementReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.AgreementReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.poly_modulus_degree_ = from._impl_.poly_modulus_degree_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.plain_modulus_ = from._impl_.plain_modulus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgreementReq::CopyFrom(const AgreementReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.AgreementReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreementReq::IsInitialized() const {
  return true;
}

void AgreementReq::InternalSwap(AgreementReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgreementReq, _impl_.plain_modulus_)
      + sizeof(AgreementReq::_impl_.plain_modulus_)
      - PROTOBUF_FIELD_OFFSET(AgreementReq, _impl_.poly_modulus_degree_)>(
          reinterpret_cast<char*>(&_impl_.poly_modulus_degree_),
          reinterpret_cast<char*>(&other->_impl_.poly_modulus_degree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgreementReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2eproto_getter, &descriptor_table_services_2eproto_once,
      file_level_metadata_services_2eproto[0]);
}

// ===================================================================

class PubKey::_Internal {
 public:
};

PubKey::PubKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.PubKey)
}
PubKey::PubKey(const PubKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PubKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){from._impl_.key_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.PubKey)
}

inline void PubKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PubKey::~PubKey() {
  // @@protoc_insertion_point(destructor:remote.PubKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PubKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.~RepeatedPtrField();
}

void PubKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PubKey::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.PubKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PubKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_key();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PubKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.PubKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes key = 1;
  for (int i = 0, n = this->_internal_key_size(); i < n; i++) {
    const auto& s = this->_internal_key(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.PubKey)
  return target;
}

size_t PubKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.PubKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes key = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.key_.size());
  for (int i = 0, n = _impl_.key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.key_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PubKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PubKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PubKey::GetClassData() const { return &_class_data_; }


void PubKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PubKey*>(&to_msg);
  auto& from = static_cast<const PubKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.PubKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_.MergeFrom(from._impl_.key_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PubKey::CopyFrom(const PubKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.PubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKey::IsInitialized() const {
  return true;
}

void PubKey::InternalSwap(PubKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_.InternalSwap(&other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PubKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2eproto_getter, &descriptor_table_services_2eproto_once,
      file_level_metadata_services_2eproto[1]);
}

// ===================================================================

class RelKey::_Internal {
 public:
};

RelKey::RelKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.RelKey)
}
RelKey::RelKey(const RelKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){from._impl_.key_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.RelKey)
}

inline void RelKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelKey::~RelKey() {
  // @@protoc_insertion_point(destructor:remote.RelKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.~RepeatedPtrField();
}

void RelKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelKey::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.RelKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_key();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.RelKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes key = 1;
  for (int i = 0, n = this->_internal_key_size(); i < n; i++) {
    const auto& s = this->_internal_key(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.RelKey)
  return target;
}

size_t RelKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.RelKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes key = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.key_.size());
  for (int i = 0, n = _impl_.key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.key_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelKey::GetClassData() const { return &_class_data_; }


void RelKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelKey*>(&to_msg);
  auto& from = static_cast<const RelKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.RelKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_.MergeFrom(from._impl_.key_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelKey::CopyFrom(const RelKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.RelKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelKey::IsInitialized() const {
  return true;
}

void RelKey::InternalSwap(RelKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_.InternalSwap(&other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2eproto_getter, &descriptor_table_services_2eproto_once,
      file_level_metadata_services_2eproto[2]);
}

// ===================================================================

class ParamMsg::_Internal {
 public:
};

ParamMsg::ParamMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.ParamMsg)
}
ParamMsg::ParamMsg(const ParamMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParamMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){from._impl_.param_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.ParamMsg)
}

inline void ParamMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParamMsg::~ParamMsg() {
  // @@protoc_insertion_point(destructor:remote.ParamMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParamMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.param_.~RepeatedPtrField();
}

void ParamMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParamMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ParamMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_param();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParamMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ParamMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes param = 1;
  for (int i = 0, n = this->_internal_param_size(); i < n; i++) {
    const auto& s = this->_internal_param(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ParamMsg)
  return target;
}

size_t ParamMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ParamMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes param = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.param_.size());
  for (int i = 0, n = _impl_.param_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.param_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParamMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamMsg::GetClassData() const { return &_class_data_; }


void ParamMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParamMsg*>(&to_msg);
  auto& from = static_cast<const ParamMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.ParamMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamMsg::CopyFrom(const ParamMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ParamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamMsg::IsInitialized() const {
  return true;
}

void ParamMsg::InternalSwap(ParamMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2eproto_getter, &descriptor_table_services_2eproto_once,
      file_level_metadata_services_2eproto[3]);
}

// ===================================================================

class AgreementRep::_Internal {
 public:
  static const ::remote::PubKey& pub(const AgreementRep* msg);
  static const ::remote::RelKey& rel(const AgreementRep* msg);
  static const ::remote::ParamMsg& par(const AgreementRep* msg);
};

const ::remote::PubKey&
AgreementRep::_Internal::pub(const AgreementRep* msg) {
  return *msg->_impl_.pub_;
}
const ::remote::RelKey&
AgreementRep::_Internal::rel(const AgreementRep* msg) {
  return *msg->_impl_.rel_;
}
const ::remote::ParamMsg&
AgreementRep::_Internal::par(const AgreementRep* msg) {
  return *msg->_impl_.par_;
}
AgreementRep::AgreementRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.AgreementRep)
}
AgreementRep::AgreementRep(const AgreementRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgreementRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_){nullptr}
    , decltype(_impl_.rel_){nullptr}
    , decltype(_impl_.par_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub()) {
    _this->_impl_.pub_ = new ::remote::PubKey(*from._impl_.pub_);
  }
  if (from._internal_has_rel()) {
    _this->_impl_.rel_ = new ::remote::RelKey(*from._impl_.rel_);
  }
  if (from._internal_has_par()) {
    _this->_impl_.par_ = new ::remote::ParamMsg(*from._impl_.par_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.AgreementRep)
}

inline void AgreementRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_){nullptr}
    , decltype(_impl_.rel_){nullptr}
    , decltype(_impl_.par_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AgreementRep::~AgreementRep() {
  // @@protoc_insertion_point(destructor:remote.AgreementRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgreementRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pub_;
  if (this != internal_default_instance()) delete _impl_.rel_;
  if (this != internal_default_instance()) delete _impl_.par_;
}

void AgreementRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgreementRep::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.AgreementRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pub_ != nullptr) {
    delete _impl_.pub_;
  }
  _impl_.pub_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rel_ != nullptr) {
    delete _impl_.rel_;
  }
  _impl_.rel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.par_ != nullptr) {
    delete _impl_.par_;
  }
  _impl_.par_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgreementRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.PubKey pub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .remote.RelKey rel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .remote.ParamMsg par = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_par(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgreementRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.AgreementRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.PubKey pub = 1;
  if (this->_internal_has_pub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pub(this),
        _Internal::pub(this).GetCachedSize(), target, stream);
  }

  // .remote.RelKey rel = 2;
  if (this->_internal_has_rel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rel(this),
        _Internal::rel(this).GetCachedSize(), target, stream);
  }

  // .remote.ParamMsg par = 3;
  if (this->_internal_has_par()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::par(this),
        _Internal::par(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.AgreementRep)
  return target;
}

size_t AgreementRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.AgreementRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .remote.PubKey pub = 1;
  if (this->_internal_has_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_);
  }

  // .remote.RelKey rel = 2;
  if (this->_internal_has_rel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rel_);
  }

  // .remote.ParamMsg par = 3;
  if (this->_internal_has_par()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.par_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgreementRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgreementRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgreementRep::GetClassData() const { return &_class_data_; }


void AgreementRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgreementRep*>(&to_msg);
  auto& from = static_cast<const AgreementRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.AgreementRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pub()) {
    _this->_internal_mutable_pub()->::remote::PubKey::MergeFrom(
        from._internal_pub());
  }
  if (from._internal_has_rel()) {
    _this->_internal_mutable_rel()->::remote::RelKey::MergeFrom(
        from._internal_rel());
  }
  if (from._internal_has_par()) {
    _this->_internal_mutable_par()->::remote::ParamMsg::MergeFrom(
        from._internal_par());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgreementRep::CopyFrom(const AgreementRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.AgreementRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreementRep::IsInitialized() const {
  return true;
}

void AgreementRep::InternalSwap(AgreementRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgreementRep, _impl_.par_)
      + sizeof(AgreementRep::_impl_.par_)
      - PROTOBUF_FIELD_OFFSET(AgreementRep, _impl_.pub_)>(
          reinterpret_cast<char*>(&_impl_.pub_),
          reinterpret_cast<char*>(&other->_impl_.pub_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgreementRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2eproto_getter, &descriptor_table_services_2eproto_once,
      file_level_metadata_services_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::remote::AgreementReq*
Arena::CreateMaybeMessage< ::remote::AgreementReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::AgreementReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::PubKey*
Arena::CreateMaybeMessage< ::remote::PubKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::PubKey >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::RelKey*
Arena::CreateMaybeMessage< ::remote::RelKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::RelKey >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ParamMsg*
Arena::CreateMaybeMessage< ::remote::ParamMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ParamMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::AgreementRep*
Arena::CreateMaybeMessage< ::remote::AgreementRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::AgreementRep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
