// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2eproto;
namespace remote {
class AgreementRep;
struct AgreementRepDefaultTypeInternal;
extern AgreementRepDefaultTypeInternal _AgreementRep_default_instance_;
class AgreementReq;
struct AgreementReqDefaultTypeInternal;
extern AgreementReqDefaultTypeInternal _AgreementReq_default_instance_;
class Ciphertexts;
struct CiphertextsDefaultTypeInternal;
extern CiphertextsDefaultTypeInternal _Ciphertexts_default_instance_;
class EncryptRep;
struct EncryptRepDefaultTypeInternal;
extern EncryptRepDefaultTypeInternal _EncryptRep_default_instance_;
class EncryptReq;
struct EncryptReqDefaultTypeInternal;
extern EncryptReqDefaultTypeInternal _EncryptReq_default_instance_;
class ExtractionRep;
struct ExtractionRepDefaultTypeInternal;
extern ExtractionRepDefaultTypeInternal _ExtractionRep_default_instance_;
class ExtractionReq;
struct ExtractionReqDefaultTypeInternal;
extern ExtractionReqDefaultTypeInternal _ExtractionReq_default_instance_;
class IntersectionRep;
struct IntersectionRepDefaultTypeInternal;
extern IntersectionRepDefaultTypeInternal _IntersectionRep_default_instance_;
class IntersectionReq;
struct IntersectionReqDefaultTypeInternal;
extern IntersectionReqDefaultTypeInternal _IntersectionReq_default_instance_;
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> ::remote::AgreementRep* Arena::CreateMaybeMessage<::remote::AgreementRep>(Arena*);
template<> ::remote::AgreementReq* Arena::CreateMaybeMessage<::remote::AgreementReq>(Arena*);
template<> ::remote::Ciphertexts* Arena::CreateMaybeMessage<::remote::Ciphertexts>(Arena*);
template<> ::remote::EncryptRep* Arena::CreateMaybeMessage<::remote::EncryptRep>(Arena*);
template<> ::remote::EncryptReq* Arena::CreateMaybeMessage<::remote::EncryptReq>(Arena*);
template<> ::remote::ExtractionRep* Arena::CreateMaybeMessage<::remote::ExtractionRep>(Arena*);
template<> ::remote::ExtractionReq* Arena::CreateMaybeMessage<::remote::ExtractionReq>(Arena*);
template<> ::remote::IntersectionRep* Arena::CreateMaybeMessage<::remote::IntersectionRep>(Arena*);
template<> ::remote::IntersectionReq* Arena::CreateMaybeMessage<::remote::IntersectionReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace remote {

// ===================================================================

class EncryptReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EncryptReq) */ {
 public:
  inline EncryptReq() : EncryptReq(nullptr) {}
  ~EncryptReq() override;
  explicit PROTOBUF_CONSTEXPR EncryptReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptReq(const EncryptReq& from);
  EncryptReq(EncryptReq&& from) noexcept
    : EncryptReq() {
    *this = ::std::move(from);
  }

  inline EncryptReq& operator=(const EncryptReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptReq& operator=(EncryptReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptReq* internal_default_instance() {
    return reinterpret_cast<const EncryptReq*>(
               &_EncryptReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptReq& a, EncryptReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncryptReq& from) {
    EncryptReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EncryptReq";
  }
  protected:
  explicit EncryptReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileToEncryptFieldNumber = 1,
    kFileExtFieldNumber = 2,
    kAgreementNameFieldNumber = 3,
  };
  // string file_to_encrypt = 1;
  void clear_file_to_encrypt();
  const std::string& file_to_encrypt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_to_encrypt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_to_encrypt();
  PROTOBUF_NODISCARD std::string* release_file_to_encrypt();
  void set_allocated_file_to_encrypt(std::string* file_to_encrypt);
  private:
  const std::string& _internal_file_to_encrypt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_to_encrypt(const std::string& value);
  std::string* _internal_mutable_file_to_encrypt();
  public:

  // string file_ext = 2;
  void clear_file_ext();
  const std::string& file_ext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_ext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_ext();
  PROTOBUF_NODISCARD std::string* release_file_ext();
  void set_allocated_file_ext(std::string* file_ext);
  private:
  const std::string& _internal_file_ext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_ext(const std::string& value);
  std::string* _internal_mutable_file_ext();
  public:

  // string agreement_name = 3;
  void clear_agreement_name();
  const std::string& agreement_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agreement_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agreement_name();
  PROTOBUF_NODISCARD std::string* release_agreement_name();
  void set_allocated_agreement_name(std::string* agreement_name);
  private:
  const std::string& _internal_agreement_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agreement_name(const std::string& value);
  std::string* _internal_mutable_agreement_name();
  public:

  // @@protoc_insertion_point(class_scope:remote.EncryptReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_to_encrypt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_ext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agreement_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class Ciphertexts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.Ciphertexts) */ {
 public:
  inline Ciphertexts() : Ciphertexts(nullptr) {}
  ~Ciphertexts() override;
  explicit PROTOBUF_CONSTEXPR Ciphertexts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ciphertexts(const Ciphertexts& from);
  Ciphertexts(Ciphertexts&& from) noexcept
    : Ciphertexts() {
    *this = ::std::move(from);
  }

  inline Ciphertexts& operator=(const Ciphertexts& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ciphertexts& operator=(Ciphertexts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ciphertexts& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ciphertexts* internal_default_instance() {
    return reinterpret_cast<const Ciphertexts*>(
               &_Ciphertexts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ciphertexts& a, Ciphertexts& b) {
    a.Swap(&b);
  }
  inline void Swap(Ciphertexts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ciphertexts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ciphertexts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ciphertexts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ciphertexts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ciphertexts& from) {
    Ciphertexts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ciphertexts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.Ciphertexts";
  }
  protected:
  explicit Ciphertexts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCipherFieldNumber = 1,
  };
  // repeated bytes cipher = 1;
  int cipher_size() const;
  private:
  int _internal_cipher_size() const;
  public:
  void clear_cipher();
  const std::string& cipher(int index) const;
  std::string* mutable_cipher(int index);
  void set_cipher(int index, const std::string& value);
  void set_cipher(int index, std::string&& value);
  void set_cipher(int index, const char* value);
  void set_cipher(int index, const void* value, size_t size);
  std::string* add_cipher();
  void add_cipher(const std::string& value);
  void add_cipher(std::string&& value);
  void add_cipher(const char* value);
  void add_cipher(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cipher() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cipher();
  private:
  const std::string& _internal_cipher(int index) const;
  std::string* _internal_add_cipher();
  public:

  // @@protoc_insertion_point(class_scope:remote.Ciphertexts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cipher_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class ExtractionReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.ExtractionReq) */ {
 public:
  inline ExtractionReq() : ExtractionReq(nullptr) {}
  ~ExtractionReq() override;
  explicit PROTOBUF_CONSTEXPR ExtractionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractionReq(const ExtractionReq& from);
  ExtractionReq(ExtractionReq&& from) noexcept
    : ExtractionReq() {
    *this = ::std::move(from);
  }

  inline ExtractionReq& operator=(const ExtractionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractionReq& operator=(ExtractionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractionReq* internal_default_instance() {
    return reinterpret_cast<const ExtractionReq*>(
               &_ExtractionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExtractionReq& a, ExtractionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractionReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtractionReq& from) {
    ExtractionReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractionReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.ExtractionReq";
  }
  protected:
  explicit ExtractionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgreementNameFieldNumber = 1,
    kComputedFileFieldNumber = 2,
    kOutputNameFieldNumber = 3,
    kReceiverFileNameFieldNumber = 4,
  };
  // string agreement_name = 1;
  void clear_agreement_name();
  const std::string& agreement_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agreement_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agreement_name();
  PROTOBUF_NODISCARD std::string* release_agreement_name();
  void set_allocated_agreement_name(std::string* agreement_name);
  private:
  const std::string& _internal_agreement_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agreement_name(const std::string& value);
  std::string* _internal_mutable_agreement_name();
  public:

  // string computed_file = 2;
  void clear_computed_file();
  const std::string& computed_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_computed_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_computed_file();
  PROTOBUF_NODISCARD std::string* release_computed_file();
  void set_allocated_computed_file(std::string* computed_file);
  private:
  const std::string& _internal_computed_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_computed_file(const std::string& value);
  std::string* _internal_mutable_computed_file();
  public:

  // string output_name = 3;
  void clear_output_name();
  const std::string& output_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_name();
  PROTOBUF_NODISCARD std::string* release_output_name();
  void set_allocated_output_name(std::string* output_name);
  private:
  const std::string& _internal_output_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_name(const std::string& value);
  std::string* _internal_mutable_output_name();
  public:

  // string receiver_file_name = 4;
  void clear_receiver_file_name();
  const std::string& receiver_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_file_name();
  PROTOBUF_NODISCARD std::string* release_receiver_file_name();
  void set_allocated_receiver_file_name(std::string* receiver_file_name);
  private:
  const std::string& _internal_receiver_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_file_name(const std::string& value);
  std::string* _internal_mutable_receiver_file_name();
  public:

  // @@protoc_insertion_point(class_scope:remote.ExtractionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agreement_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computed_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_file_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class ExtractionRep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.ExtractionRep) */ {
 public:
  inline ExtractionRep() : ExtractionRep(nullptr) {}
  ~ExtractionRep() override;
  explicit PROTOBUF_CONSTEXPR ExtractionRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractionRep(const ExtractionRep& from);
  ExtractionRep(ExtractionRep&& from) noexcept
    : ExtractionRep() {
    *this = ::std::move(from);
  }

  inline ExtractionRep& operator=(const ExtractionRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractionRep& operator=(ExtractionRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractionRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractionRep* internal_default_instance() {
    return reinterpret_cast<const ExtractionRep*>(
               &_ExtractionRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExtractionRep& a, ExtractionRep& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractionRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractionRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractionRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractionRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractionRep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtractionRep& from) {
    ExtractionRep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractionRep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.ExtractionRep";
  }
  protected:
  explicit ExtractionRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:remote.ExtractionRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class EncryptRep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EncryptRep) */ {
 public:
  inline EncryptRep() : EncryptRep(nullptr) {}
  ~EncryptRep() override;
  explicit PROTOBUF_CONSTEXPR EncryptRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptRep(const EncryptRep& from);
  EncryptRep(EncryptRep&& from) noexcept
    : EncryptRep() {
    *this = ::std::move(from);
  }

  inline EncryptRep& operator=(const EncryptRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptRep& operator=(EncryptRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptRep* internal_default_instance() {
    return reinterpret_cast<const EncryptRep*>(
               &_EncryptRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EncryptRep& a, EncryptRep& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptRep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncryptRep& from) {
    EncryptRep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptRep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EncryptRep";
  }
  protected:
  explicit EncryptRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCiphertextsFieldNumber = 1,
  };
  // .remote.Ciphertexts ciphertexts = 1;
  bool has_ciphertexts() const;
  private:
  bool _internal_has_ciphertexts() const;
  public:
  void clear_ciphertexts();
  const ::remote::Ciphertexts& ciphertexts() const;
  PROTOBUF_NODISCARD ::remote::Ciphertexts* release_ciphertexts();
  ::remote::Ciphertexts* mutable_ciphertexts();
  void set_allocated_ciphertexts(::remote::Ciphertexts* ciphertexts);
  private:
  const ::remote::Ciphertexts& _internal_ciphertexts() const;
  ::remote::Ciphertexts* _internal_mutable_ciphertexts();
  public:
  void unsafe_arena_set_allocated_ciphertexts(
      ::remote::Ciphertexts* ciphertexts);
  ::remote::Ciphertexts* unsafe_arena_release_ciphertexts();

  // @@protoc_insertion_point(class_scope:remote.EncryptRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::remote::Ciphertexts* ciphertexts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class IntersectionReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.IntersectionReq) */ {
 public:
  inline IntersectionReq() : IntersectionReq(nullptr) {}
  ~IntersectionReq() override;
  explicit PROTOBUF_CONSTEXPR IntersectionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntersectionReq(const IntersectionReq& from);
  IntersectionReq(IntersectionReq&& from) noexcept
    : IntersectionReq() {
    *this = ::std::move(from);
  }

  inline IntersectionReq& operator=(const IntersectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntersectionReq& operator=(IntersectionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntersectionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntersectionReq* internal_default_instance() {
    return reinterpret_cast<const IntersectionReq*>(
               &_IntersectionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IntersectionReq& a, IntersectionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IntersectionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntersectionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntersectionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntersectionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntersectionReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IntersectionReq& from) {
    IntersectionReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntersectionReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.IntersectionReq";
  }
  protected:
  explicit IntersectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kComputationResultFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .remote.Ciphertexts computation_result = 2;
  bool has_computation_result() const;
  private:
  bool _internal_has_computation_result() const;
  public:
  void clear_computation_result();
  const ::remote::Ciphertexts& computation_result() const;
  PROTOBUF_NODISCARD ::remote::Ciphertexts* release_computation_result();
  ::remote::Ciphertexts* mutable_computation_result();
  void set_allocated_computation_result(::remote::Ciphertexts* computation_result);
  private:
  const ::remote::Ciphertexts& _internal_computation_result() const;
  ::remote::Ciphertexts* _internal_mutable_computation_result();
  public:
  void unsafe_arena_set_allocated_computation_result(
      ::remote::Ciphertexts* computation_result);
  ::remote::Ciphertexts* unsafe_arena_release_computation_result();

  // @@protoc_insertion_point(class_scope:remote.IntersectionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::remote::Ciphertexts* computation_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class IntersectionRep final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:remote.IntersectionRep) */ {
 public:
  inline IntersectionRep() : IntersectionRep(nullptr) {}
  explicit PROTOBUF_CONSTEXPR IntersectionRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntersectionRep(const IntersectionRep& from);
  IntersectionRep(IntersectionRep&& from) noexcept
    : IntersectionRep() {
    *this = ::std::move(from);
  }

  inline IntersectionRep& operator=(const IntersectionRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntersectionRep& operator=(IntersectionRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntersectionRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntersectionRep* internal_default_instance() {
    return reinterpret_cast<const IntersectionRep*>(
               &_IntersectionRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IntersectionRep& a, IntersectionRep& b) {
    a.Swap(&b);
  }
  inline void Swap(IntersectionRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntersectionRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntersectionRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntersectionRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IntersectionRep& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IntersectionRep& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.IntersectionRep";
  }
  protected:
  explicit IntersectionRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:remote.IntersectionRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class AgreementReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.AgreementReq) */ {
 public:
  inline AgreementReq() : AgreementReq(nullptr) {}
  ~AgreementReq() override;
  explicit PROTOBUF_CONSTEXPR AgreementReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgreementReq(const AgreementReq& from);
  AgreementReq(AgreementReq&& from) noexcept
    : AgreementReq() {
    *this = ::std::move(from);
  }

  inline AgreementReq& operator=(const AgreementReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgreementReq& operator=(AgreementReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgreementReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgreementReq* internal_default_instance() {
    return reinterpret_cast<const AgreementReq*>(
               &_AgreementReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AgreementReq& a, AgreementReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AgreementReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgreementReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgreementReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgreementReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgreementReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgreementReq& from) {
    AgreementReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreementReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.AgreementReq";
  }
  protected:
  explicit AgreementReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolyModulusDegreeFieldNumber = 2,
    kPlainModulusFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 poly_modulus_degree = 2;
  void clear_poly_modulus_degree();
  int64_t poly_modulus_degree() const;
  void set_poly_modulus_degree(int64_t value);
  private:
  int64_t _internal_poly_modulus_degree() const;
  void _internal_set_poly_modulus_degree(int64_t value);
  public:

  // int64 plain_modulus = 3;
  void clear_plain_modulus();
  int64_t plain_modulus() const;
  void set_plain_modulus(int64_t value);
  private:
  int64_t _internal_plain_modulus() const;
  void _internal_set_plain_modulus(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:remote.AgreementReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t poly_modulus_degree_;
    int64_t plain_modulus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// -------------------------------------------------------------------

class AgreementRep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.AgreementRep) */ {
 public:
  inline AgreementRep() : AgreementRep(nullptr) {}
  ~AgreementRep() override;
  explicit PROTOBUF_CONSTEXPR AgreementRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgreementRep(const AgreementRep& from);
  AgreementRep(AgreementRep&& from) noexcept
    : AgreementRep() {
    *this = ::std::move(from);
  }

  inline AgreementRep& operator=(const AgreementRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgreementRep& operator=(AgreementRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgreementRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgreementRep* internal_default_instance() {
    return reinterpret_cast<const AgreementRep*>(
               &_AgreementRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AgreementRep& a, AgreementRep& b) {
    a.Swap(&b);
  }
  inline void Swap(AgreementRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgreementRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgreementRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgreementRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgreementRep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgreementRep& from) {
    AgreementRep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreementRep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.AgreementRep";
  }
  protected:
  explicit AgreementRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubFieldNumber = 1,
    kRelFieldNumber = 2,
    kParFieldNumber = 3,
  };
  // bytes pub = 1;
  void clear_pub();
  const std::string& pub() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pub(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pub();
  PROTOBUF_NODISCARD std::string* release_pub();
  void set_allocated_pub(std::string* pub);
  private:
  const std::string& _internal_pub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pub(const std::string& value);
  std::string* _internal_mutable_pub();
  public:

  // bytes rel = 2;
  void clear_rel();
  const std::string& rel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rel();
  PROTOBUF_NODISCARD std::string* release_rel();
  void set_allocated_rel(std::string* rel);
  private:
  const std::string& _internal_rel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rel(const std::string& value);
  std::string* _internal_mutable_rel();
  public:

  // bytes par = 3;
  void clear_par();
  const std::string& par() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_par(ArgT0&& arg0, ArgT... args);
  std::string* mutable_par();
  PROTOBUF_NODISCARD std::string* release_par();
  void set_allocated_par(std::string* par);
  private:
  const std::string& _internal_par() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_par(const std::string& value);
  std::string* _internal_mutable_par();
  public:

  // @@protoc_insertion_point(class_scope:remote.AgreementRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr par_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptReq

// string file_to_encrypt = 1;
inline void EncryptReq::clear_file_to_encrypt() {
  _impl_.file_to_encrypt_.ClearToEmpty();
}
inline const std::string& EncryptReq::file_to_encrypt() const {
  // @@protoc_insertion_point(field_get:remote.EncryptReq.file_to_encrypt)
  return _internal_file_to_encrypt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptReq::set_file_to_encrypt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_to_encrypt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.EncryptReq.file_to_encrypt)
}
inline std::string* EncryptReq::mutable_file_to_encrypt() {
  std::string* _s = _internal_mutable_file_to_encrypt();
  // @@protoc_insertion_point(field_mutable:remote.EncryptReq.file_to_encrypt)
  return _s;
}
inline const std::string& EncryptReq::_internal_file_to_encrypt() const {
  return _impl_.file_to_encrypt_.Get();
}
inline void EncryptReq::_internal_set_file_to_encrypt(const std::string& value) {
  
  _impl_.file_to_encrypt_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptReq::_internal_mutable_file_to_encrypt() {
  
  return _impl_.file_to_encrypt_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptReq::release_file_to_encrypt() {
  // @@protoc_insertion_point(field_release:remote.EncryptReq.file_to_encrypt)
  return _impl_.file_to_encrypt_.Release();
}
inline void EncryptReq::set_allocated_file_to_encrypt(std::string* file_to_encrypt) {
  if (file_to_encrypt != nullptr) {
    
  } else {
    
  }
  _impl_.file_to_encrypt_.SetAllocated(file_to_encrypt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_to_encrypt_.IsDefault()) {
    _impl_.file_to_encrypt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.EncryptReq.file_to_encrypt)
}

// string file_ext = 2;
inline void EncryptReq::clear_file_ext() {
  _impl_.file_ext_.ClearToEmpty();
}
inline const std::string& EncryptReq::file_ext() const {
  // @@protoc_insertion_point(field_get:remote.EncryptReq.file_ext)
  return _internal_file_ext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptReq::set_file_ext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_ext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.EncryptReq.file_ext)
}
inline std::string* EncryptReq::mutable_file_ext() {
  std::string* _s = _internal_mutable_file_ext();
  // @@protoc_insertion_point(field_mutable:remote.EncryptReq.file_ext)
  return _s;
}
inline const std::string& EncryptReq::_internal_file_ext() const {
  return _impl_.file_ext_.Get();
}
inline void EncryptReq::_internal_set_file_ext(const std::string& value) {
  
  _impl_.file_ext_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptReq::_internal_mutable_file_ext() {
  
  return _impl_.file_ext_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptReq::release_file_ext() {
  // @@protoc_insertion_point(field_release:remote.EncryptReq.file_ext)
  return _impl_.file_ext_.Release();
}
inline void EncryptReq::set_allocated_file_ext(std::string* file_ext) {
  if (file_ext != nullptr) {
    
  } else {
    
  }
  _impl_.file_ext_.SetAllocated(file_ext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_ext_.IsDefault()) {
    _impl_.file_ext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.EncryptReq.file_ext)
}

// string agreement_name = 3;
inline void EncryptReq::clear_agreement_name() {
  _impl_.agreement_name_.ClearToEmpty();
}
inline const std::string& EncryptReq::agreement_name() const {
  // @@protoc_insertion_point(field_get:remote.EncryptReq.agreement_name)
  return _internal_agreement_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptReq::set_agreement_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agreement_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.EncryptReq.agreement_name)
}
inline std::string* EncryptReq::mutable_agreement_name() {
  std::string* _s = _internal_mutable_agreement_name();
  // @@protoc_insertion_point(field_mutable:remote.EncryptReq.agreement_name)
  return _s;
}
inline const std::string& EncryptReq::_internal_agreement_name() const {
  return _impl_.agreement_name_.Get();
}
inline void EncryptReq::_internal_set_agreement_name(const std::string& value) {
  
  _impl_.agreement_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptReq::_internal_mutable_agreement_name() {
  
  return _impl_.agreement_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptReq::release_agreement_name() {
  // @@protoc_insertion_point(field_release:remote.EncryptReq.agreement_name)
  return _impl_.agreement_name_.Release();
}
inline void EncryptReq::set_allocated_agreement_name(std::string* agreement_name) {
  if (agreement_name != nullptr) {
    
  } else {
    
  }
  _impl_.agreement_name_.SetAllocated(agreement_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agreement_name_.IsDefault()) {
    _impl_.agreement_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.EncryptReq.agreement_name)
}

// -------------------------------------------------------------------

// Ciphertexts

// repeated bytes cipher = 1;
inline int Ciphertexts::_internal_cipher_size() const {
  return _impl_.cipher_.size();
}
inline int Ciphertexts::cipher_size() const {
  return _internal_cipher_size();
}
inline void Ciphertexts::clear_cipher() {
  _impl_.cipher_.Clear();
}
inline std::string* Ciphertexts::add_cipher() {
  std::string* _s = _internal_add_cipher();
  // @@protoc_insertion_point(field_add_mutable:remote.Ciphertexts.cipher)
  return _s;
}
inline const std::string& Ciphertexts::_internal_cipher(int index) const {
  return _impl_.cipher_.Get(index);
}
inline const std::string& Ciphertexts::cipher(int index) const {
  // @@protoc_insertion_point(field_get:remote.Ciphertexts.cipher)
  return _internal_cipher(index);
}
inline std::string* Ciphertexts::mutable_cipher(int index) {
  // @@protoc_insertion_point(field_mutable:remote.Ciphertexts.cipher)
  return _impl_.cipher_.Mutable(index);
}
inline void Ciphertexts::set_cipher(int index, const std::string& value) {
  _impl_.cipher_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:remote.Ciphertexts.cipher)
}
inline void Ciphertexts::set_cipher(int index, std::string&& value) {
  _impl_.cipher_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:remote.Ciphertexts.cipher)
}
inline void Ciphertexts::set_cipher(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.cipher_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:remote.Ciphertexts.cipher)
}
inline void Ciphertexts::set_cipher(int index, const void* value, size_t size) {
  _impl_.cipher_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:remote.Ciphertexts.cipher)
}
inline std::string* Ciphertexts::_internal_add_cipher() {
  return _impl_.cipher_.Add();
}
inline void Ciphertexts::add_cipher(const std::string& value) {
  _impl_.cipher_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:remote.Ciphertexts.cipher)
}
inline void Ciphertexts::add_cipher(std::string&& value) {
  _impl_.cipher_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:remote.Ciphertexts.cipher)
}
inline void Ciphertexts::add_cipher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.cipher_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:remote.Ciphertexts.cipher)
}
inline void Ciphertexts::add_cipher(const void* value, size_t size) {
  _impl_.cipher_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:remote.Ciphertexts.cipher)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Ciphertexts::cipher() const {
  // @@protoc_insertion_point(field_list:remote.Ciphertexts.cipher)
  return _impl_.cipher_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Ciphertexts::mutable_cipher() {
  // @@protoc_insertion_point(field_mutable_list:remote.Ciphertexts.cipher)
  return &_impl_.cipher_;
}

// -------------------------------------------------------------------

// ExtractionReq

// string agreement_name = 1;
inline void ExtractionReq::clear_agreement_name() {
  _impl_.agreement_name_.ClearToEmpty();
}
inline const std::string& ExtractionReq::agreement_name() const {
  // @@protoc_insertion_point(field_get:remote.ExtractionReq.agreement_name)
  return _internal_agreement_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractionReq::set_agreement_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agreement_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.ExtractionReq.agreement_name)
}
inline std::string* ExtractionReq::mutable_agreement_name() {
  std::string* _s = _internal_mutable_agreement_name();
  // @@protoc_insertion_point(field_mutable:remote.ExtractionReq.agreement_name)
  return _s;
}
inline const std::string& ExtractionReq::_internal_agreement_name() const {
  return _impl_.agreement_name_.Get();
}
inline void ExtractionReq::_internal_set_agreement_name(const std::string& value) {
  
  _impl_.agreement_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtractionReq::_internal_mutable_agreement_name() {
  
  return _impl_.agreement_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtractionReq::release_agreement_name() {
  // @@protoc_insertion_point(field_release:remote.ExtractionReq.agreement_name)
  return _impl_.agreement_name_.Release();
}
inline void ExtractionReq::set_allocated_agreement_name(std::string* agreement_name) {
  if (agreement_name != nullptr) {
    
  } else {
    
  }
  _impl_.agreement_name_.SetAllocated(agreement_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agreement_name_.IsDefault()) {
    _impl_.agreement_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.ExtractionReq.agreement_name)
}

// string computed_file = 2;
inline void ExtractionReq::clear_computed_file() {
  _impl_.computed_file_.ClearToEmpty();
}
inline const std::string& ExtractionReq::computed_file() const {
  // @@protoc_insertion_point(field_get:remote.ExtractionReq.computed_file)
  return _internal_computed_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractionReq::set_computed_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.computed_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.ExtractionReq.computed_file)
}
inline std::string* ExtractionReq::mutable_computed_file() {
  std::string* _s = _internal_mutable_computed_file();
  // @@protoc_insertion_point(field_mutable:remote.ExtractionReq.computed_file)
  return _s;
}
inline const std::string& ExtractionReq::_internal_computed_file() const {
  return _impl_.computed_file_.Get();
}
inline void ExtractionReq::_internal_set_computed_file(const std::string& value) {
  
  _impl_.computed_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtractionReq::_internal_mutable_computed_file() {
  
  return _impl_.computed_file_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtractionReq::release_computed_file() {
  // @@protoc_insertion_point(field_release:remote.ExtractionReq.computed_file)
  return _impl_.computed_file_.Release();
}
inline void ExtractionReq::set_allocated_computed_file(std::string* computed_file) {
  if (computed_file != nullptr) {
    
  } else {
    
  }
  _impl_.computed_file_.SetAllocated(computed_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.computed_file_.IsDefault()) {
    _impl_.computed_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.ExtractionReq.computed_file)
}

// string output_name = 3;
inline void ExtractionReq::clear_output_name() {
  _impl_.output_name_.ClearToEmpty();
}
inline const std::string& ExtractionReq::output_name() const {
  // @@protoc_insertion_point(field_get:remote.ExtractionReq.output_name)
  return _internal_output_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractionReq::set_output_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.ExtractionReq.output_name)
}
inline std::string* ExtractionReq::mutable_output_name() {
  std::string* _s = _internal_mutable_output_name();
  // @@protoc_insertion_point(field_mutable:remote.ExtractionReq.output_name)
  return _s;
}
inline const std::string& ExtractionReq::_internal_output_name() const {
  return _impl_.output_name_.Get();
}
inline void ExtractionReq::_internal_set_output_name(const std::string& value) {
  
  _impl_.output_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtractionReq::_internal_mutable_output_name() {
  
  return _impl_.output_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtractionReq::release_output_name() {
  // @@protoc_insertion_point(field_release:remote.ExtractionReq.output_name)
  return _impl_.output_name_.Release();
}
inline void ExtractionReq::set_allocated_output_name(std::string* output_name) {
  if (output_name != nullptr) {
    
  } else {
    
  }
  _impl_.output_name_.SetAllocated(output_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_name_.IsDefault()) {
    _impl_.output_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.ExtractionReq.output_name)
}

// string receiver_file_name = 4;
inline void ExtractionReq::clear_receiver_file_name() {
  _impl_.receiver_file_name_.ClearToEmpty();
}
inline const std::string& ExtractionReq::receiver_file_name() const {
  // @@protoc_insertion_point(field_get:remote.ExtractionReq.receiver_file_name)
  return _internal_receiver_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractionReq::set_receiver_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.ExtractionReq.receiver_file_name)
}
inline std::string* ExtractionReq::mutable_receiver_file_name() {
  std::string* _s = _internal_mutable_receiver_file_name();
  // @@protoc_insertion_point(field_mutable:remote.ExtractionReq.receiver_file_name)
  return _s;
}
inline const std::string& ExtractionReq::_internal_receiver_file_name() const {
  return _impl_.receiver_file_name_.Get();
}
inline void ExtractionReq::_internal_set_receiver_file_name(const std::string& value) {
  
  _impl_.receiver_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtractionReq::_internal_mutable_receiver_file_name() {
  
  return _impl_.receiver_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtractionReq::release_receiver_file_name() {
  // @@protoc_insertion_point(field_release:remote.ExtractionReq.receiver_file_name)
  return _impl_.receiver_file_name_.Release();
}
inline void ExtractionReq::set_allocated_receiver_file_name(std::string* receiver_file_name) {
  if (receiver_file_name != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_file_name_.SetAllocated(receiver_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_file_name_.IsDefault()) {
    _impl_.receiver_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.ExtractionReq.receiver_file_name)
}

// -------------------------------------------------------------------

// ExtractionRep

// bytes result = 1;
inline void ExtractionRep::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ExtractionRep::result() const {
  // @@protoc_insertion_point(field_get:remote.ExtractionRep.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractionRep::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.ExtractionRep.result)
}
inline std::string* ExtractionRep::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:remote.ExtractionRep.result)
  return _s;
}
inline const std::string& ExtractionRep::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ExtractionRep::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtractionRep::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtractionRep::release_result() {
  // @@protoc_insertion_point(field_release:remote.ExtractionRep.result)
  return _impl_.result_.Release();
}
inline void ExtractionRep::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.ExtractionRep.result)
}

// -------------------------------------------------------------------

// EncryptRep

// .remote.Ciphertexts ciphertexts = 1;
inline bool EncryptRep::_internal_has_ciphertexts() const {
  return this != internal_default_instance() && _impl_.ciphertexts_ != nullptr;
}
inline bool EncryptRep::has_ciphertexts() const {
  return _internal_has_ciphertexts();
}
inline void EncryptRep::clear_ciphertexts() {
  if (GetArenaForAllocation() == nullptr && _impl_.ciphertexts_ != nullptr) {
    delete _impl_.ciphertexts_;
  }
  _impl_.ciphertexts_ = nullptr;
}
inline const ::remote::Ciphertexts& EncryptRep::_internal_ciphertexts() const {
  const ::remote::Ciphertexts* p = _impl_.ciphertexts_;
  return p != nullptr ? *p : reinterpret_cast<const ::remote::Ciphertexts&>(
      ::remote::_Ciphertexts_default_instance_);
}
inline const ::remote::Ciphertexts& EncryptRep::ciphertexts() const {
  // @@protoc_insertion_point(field_get:remote.EncryptRep.ciphertexts)
  return _internal_ciphertexts();
}
inline void EncryptRep::unsafe_arena_set_allocated_ciphertexts(
    ::remote::Ciphertexts* ciphertexts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ciphertexts_);
  }
  _impl_.ciphertexts_ = ciphertexts;
  if (ciphertexts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EncryptRep.ciphertexts)
}
inline ::remote::Ciphertexts* EncryptRep::release_ciphertexts() {
  
  ::remote::Ciphertexts* temp = _impl_.ciphertexts_;
  _impl_.ciphertexts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::remote::Ciphertexts* EncryptRep::unsafe_arena_release_ciphertexts() {
  // @@protoc_insertion_point(field_release:remote.EncryptRep.ciphertexts)
  
  ::remote::Ciphertexts* temp = _impl_.ciphertexts_;
  _impl_.ciphertexts_ = nullptr;
  return temp;
}
inline ::remote::Ciphertexts* EncryptRep::_internal_mutable_ciphertexts() {
  
  if (_impl_.ciphertexts_ == nullptr) {
    auto* p = CreateMaybeMessage<::remote::Ciphertexts>(GetArenaForAllocation());
    _impl_.ciphertexts_ = p;
  }
  return _impl_.ciphertexts_;
}
inline ::remote::Ciphertexts* EncryptRep::mutable_ciphertexts() {
  ::remote::Ciphertexts* _msg = _internal_mutable_ciphertexts();
  // @@protoc_insertion_point(field_mutable:remote.EncryptRep.ciphertexts)
  return _msg;
}
inline void EncryptRep::set_allocated_ciphertexts(::remote::Ciphertexts* ciphertexts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ciphertexts_;
  }
  if (ciphertexts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ciphertexts);
    if (message_arena != submessage_arena) {
      ciphertexts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ciphertexts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ciphertexts_ = ciphertexts;
  // @@protoc_insertion_point(field_set_allocated:remote.EncryptRep.ciphertexts)
}

// -------------------------------------------------------------------

// IntersectionReq

// string name = 1;
inline void IntersectionReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& IntersectionReq::name() const {
  // @@protoc_insertion_point(field_get:remote.IntersectionReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IntersectionReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.IntersectionReq.name)
}
inline std::string* IntersectionReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:remote.IntersectionReq.name)
  return _s;
}
inline const std::string& IntersectionReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void IntersectionReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* IntersectionReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* IntersectionReq::release_name() {
  // @@protoc_insertion_point(field_release:remote.IntersectionReq.name)
  return _impl_.name_.Release();
}
inline void IntersectionReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.IntersectionReq.name)
}

// .remote.Ciphertexts computation_result = 2;
inline bool IntersectionReq::_internal_has_computation_result() const {
  return this != internal_default_instance() && _impl_.computation_result_ != nullptr;
}
inline bool IntersectionReq::has_computation_result() const {
  return _internal_has_computation_result();
}
inline void IntersectionReq::clear_computation_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.computation_result_ != nullptr) {
    delete _impl_.computation_result_;
  }
  _impl_.computation_result_ = nullptr;
}
inline const ::remote::Ciphertexts& IntersectionReq::_internal_computation_result() const {
  const ::remote::Ciphertexts* p = _impl_.computation_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::remote::Ciphertexts&>(
      ::remote::_Ciphertexts_default_instance_);
}
inline const ::remote::Ciphertexts& IntersectionReq::computation_result() const {
  // @@protoc_insertion_point(field_get:remote.IntersectionReq.computation_result)
  return _internal_computation_result();
}
inline void IntersectionReq::unsafe_arena_set_allocated_computation_result(
    ::remote::Ciphertexts* computation_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.computation_result_);
  }
  _impl_.computation_result_ = computation_result;
  if (computation_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.IntersectionReq.computation_result)
}
inline ::remote::Ciphertexts* IntersectionReq::release_computation_result() {
  
  ::remote::Ciphertexts* temp = _impl_.computation_result_;
  _impl_.computation_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::remote::Ciphertexts* IntersectionReq::unsafe_arena_release_computation_result() {
  // @@protoc_insertion_point(field_release:remote.IntersectionReq.computation_result)
  
  ::remote::Ciphertexts* temp = _impl_.computation_result_;
  _impl_.computation_result_ = nullptr;
  return temp;
}
inline ::remote::Ciphertexts* IntersectionReq::_internal_mutable_computation_result() {
  
  if (_impl_.computation_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::remote::Ciphertexts>(GetArenaForAllocation());
    _impl_.computation_result_ = p;
  }
  return _impl_.computation_result_;
}
inline ::remote::Ciphertexts* IntersectionReq::mutable_computation_result() {
  ::remote::Ciphertexts* _msg = _internal_mutable_computation_result();
  // @@protoc_insertion_point(field_mutable:remote.IntersectionReq.computation_result)
  return _msg;
}
inline void IntersectionReq::set_allocated_computation_result(::remote::Ciphertexts* computation_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.computation_result_;
  }
  if (computation_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(computation_result);
    if (message_arena != submessage_arena) {
      computation_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, computation_result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.computation_result_ = computation_result;
  // @@protoc_insertion_point(field_set_allocated:remote.IntersectionReq.computation_result)
}

// -------------------------------------------------------------------

// IntersectionRep

// -------------------------------------------------------------------

// AgreementReq

// string name = 1;
inline void AgreementReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AgreementReq::name() const {
  // @@protoc_insertion_point(field_get:remote.AgreementReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreementReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.AgreementReq.name)
}
inline std::string* AgreementReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:remote.AgreementReq.name)
  return _s;
}
inline const std::string& AgreementReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AgreementReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AgreementReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AgreementReq::release_name() {
  // @@protoc_insertion_point(field_release:remote.AgreementReq.name)
  return _impl_.name_.Release();
}
inline void AgreementReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.AgreementReq.name)
}

// int64 poly_modulus_degree = 2;
inline void AgreementReq::clear_poly_modulus_degree() {
  _impl_.poly_modulus_degree_ = int64_t{0};
}
inline int64_t AgreementReq::_internal_poly_modulus_degree() const {
  return _impl_.poly_modulus_degree_;
}
inline int64_t AgreementReq::poly_modulus_degree() const {
  // @@protoc_insertion_point(field_get:remote.AgreementReq.poly_modulus_degree)
  return _internal_poly_modulus_degree();
}
inline void AgreementReq::_internal_set_poly_modulus_degree(int64_t value) {
  
  _impl_.poly_modulus_degree_ = value;
}
inline void AgreementReq::set_poly_modulus_degree(int64_t value) {
  _internal_set_poly_modulus_degree(value);
  // @@protoc_insertion_point(field_set:remote.AgreementReq.poly_modulus_degree)
}

// int64 plain_modulus = 3;
inline void AgreementReq::clear_plain_modulus() {
  _impl_.plain_modulus_ = int64_t{0};
}
inline int64_t AgreementReq::_internal_plain_modulus() const {
  return _impl_.plain_modulus_;
}
inline int64_t AgreementReq::plain_modulus() const {
  // @@protoc_insertion_point(field_get:remote.AgreementReq.plain_modulus)
  return _internal_plain_modulus();
}
inline void AgreementReq::_internal_set_plain_modulus(int64_t value) {
  
  _impl_.plain_modulus_ = value;
}
inline void AgreementReq::set_plain_modulus(int64_t value) {
  _internal_set_plain_modulus(value);
  // @@protoc_insertion_point(field_set:remote.AgreementReq.plain_modulus)
}

// -------------------------------------------------------------------

// AgreementRep

// bytes pub = 1;
inline void AgreementRep::clear_pub() {
  _impl_.pub_.ClearToEmpty();
}
inline const std::string& AgreementRep::pub() const {
  // @@protoc_insertion_point(field_get:remote.AgreementRep.pub)
  return _internal_pub();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreementRep::set_pub(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pub_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.AgreementRep.pub)
}
inline std::string* AgreementRep::mutable_pub() {
  std::string* _s = _internal_mutable_pub();
  // @@protoc_insertion_point(field_mutable:remote.AgreementRep.pub)
  return _s;
}
inline const std::string& AgreementRep::_internal_pub() const {
  return _impl_.pub_.Get();
}
inline void AgreementRep::_internal_set_pub(const std::string& value) {
  
  _impl_.pub_.Set(value, GetArenaForAllocation());
}
inline std::string* AgreementRep::_internal_mutable_pub() {
  
  return _impl_.pub_.Mutable(GetArenaForAllocation());
}
inline std::string* AgreementRep::release_pub() {
  // @@protoc_insertion_point(field_release:remote.AgreementRep.pub)
  return _impl_.pub_.Release();
}
inline void AgreementRep::set_allocated_pub(std::string* pub) {
  if (pub != nullptr) {
    
  } else {
    
  }
  _impl_.pub_.SetAllocated(pub, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pub_.IsDefault()) {
    _impl_.pub_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.AgreementRep.pub)
}

// bytes rel = 2;
inline void AgreementRep::clear_rel() {
  _impl_.rel_.ClearToEmpty();
}
inline const std::string& AgreementRep::rel() const {
  // @@protoc_insertion_point(field_get:remote.AgreementRep.rel)
  return _internal_rel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreementRep::set_rel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rel_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.AgreementRep.rel)
}
inline std::string* AgreementRep::mutable_rel() {
  std::string* _s = _internal_mutable_rel();
  // @@protoc_insertion_point(field_mutable:remote.AgreementRep.rel)
  return _s;
}
inline const std::string& AgreementRep::_internal_rel() const {
  return _impl_.rel_.Get();
}
inline void AgreementRep::_internal_set_rel(const std::string& value) {
  
  _impl_.rel_.Set(value, GetArenaForAllocation());
}
inline std::string* AgreementRep::_internal_mutable_rel() {
  
  return _impl_.rel_.Mutable(GetArenaForAllocation());
}
inline std::string* AgreementRep::release_rel() {
  // @@protoc_insertion_point(field_release:remote.AgreementRep.rel)
  return _impl_.rel_.Release();
}
inline void AgreementRep::set_allocated_rel(std::string* rel) {
  if (rel != nullptr) {
    
  } else {
    
  }
  _impl_.rel_.SetAllocated(rel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rel_.IsDefault()) {
    _impl_.rel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.AgreementRep.rel)
}

// bytes par = 3;
inline void AgreementRep::clear_par() {
  _impl_.par_.ClearToEmpty();
}
inline const std::string& AgreementRep::par() const {
  // @@protoc_insertion_point(field_get:remote.AgreementRep.par)
  return _internal_par();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgreementRep::set_par(ArgT0&& arg0, ArgT... args) {
 
 _impl_.par_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.AgreementRep.par)
}
inline std::string* AgreementRep::mutable_par() {
  std::string* _s = _internal_mutable_par();
  // @@protoc_insertion_point(field_mutable:remote.AgreementRep.par)
  return _s;
}
inline const std::string& AgreementRep::_internal_par() const {
  return _impl_.par_.Get();
}
inline void AgreementRep::_internal_set_par(const std::string& value) {
  
  _impl_.par_.Set(value, GetArenaForAllocation());
}
inline std::string* AgreementRep::_internal_mutable_par() {
  
  return _impl_.par_.Mutable(GetArenaForAllocation());
}
inline std::string* AgreementRep::release_par() {
  // @@protoc_insertion_point(field_release:remote.AgreementRep.par)
  return _impl_.par_.Release();
}
inline void AgreementRep::set_allocated_par(std::string* par) {
  if (par != nullptr) {
    
  } else {
    
  }
  _impl_.par_.SetAllocated(par, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.par_.IsDefault()) {
    _impl_.par_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.AgreementRep.par)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2eproto
